#include "ServerMessageFactory.h"
#include <QDebug>


//QByteArray jsonString = ClientMessageFactory::createInsertMessage(symbol);
//m_socket.sendTextMessage(jsonString);

QByteArray ServerMessageFactory::createNewClientMessage(const Account *account) {
    QJsonObject l_obj;
    l_obj.insert("action", "newClient");    
    QJsonValue jsonAccount(account->toJson());
    l_obj.insert("account", jsonAccount);

    QJsonDocument l_doc(l_obj);
    return l_doc.toJson(QJsonDocument::Indented);
}


// if "response" == false then "account" must be null
QByteArray ServerMessageFactory::createLoginReply(bool response, const Account *account, QList<QString>& nameDocuments) {
    QJsonObject objToReturn;
    QJsonArray nameDocumentsArray;
    QString responseString;
    if(response)
        responseString = "ok";
    else
        responseString = "fail";

    objToReturn.insert("action","loginRepl");
    objToReturn.insert("response",responseString);
    if(account != nullptr)
        objToReturn.insert("account", account->toJson());

    for(QString nameDocument : nameDocuments){
        nameDocumentsArray.push_back(nameDocument);
    }
    objToReturn.insert("nameDocuments",nameDocumentsArray);

    QJsonDocument docOfObj(objToReturn);    

    return docOfObj.toJson(QJsonDocument::Indented);
}


QByteArray ServerMessageFactory::createClosedEditorReply(QList<QString>& nameDocuments){
    QJsonObject objToReturn;
    QJsonArray nameDocumentsArray;

    objToReturn.insert("action","closedEditorRepl");

    for(QString nameDocument : nameDocuments){
        nameDocumentsArray.push_back(nameDocument);
    }
    objToReturn.insert("nameDocuments",nameDocumentsArray);

    QJsonDocument docOfObj(objToReturn);

    return docOfObj.toJson(QJsonDocument::Indented);
}


QByteArray ServerMessageFactory::createClosedEditorRemote(const Account *accountQuitted){
    QJsonObject objToReturn;

    objToReturn.insert("action","closedEditorRemote");
    if(accountQuitted != nullptr){
        objToReturn.insert("account", accountQuitted->toJson());
    }
    QJsonDocument docOfObj(objToReturn);

    return docOfObj.toJson(QJsonDocument::Indented);
}


QByteArray ServerMessageFactory::createRegistrationUserReply(bool response, double siteIdOfRegisteredUser){
    QJsonObject objToReturn;
    QString responseString;
    if(response)
        responseString = "ok";
    else
        responseString = "fail";

    //we insert the siteId(generated by the db) in the message
    //so that it's possible to create the related Account object
    objToReturn.insert("action","registerUserRepl");
    objToReturn.insert("response",responseString);
    objToReturn.insert("siteId",siteIdOfRegisteredUser);

    QJsonDocument docOfObj(objToReturn);
    return docOfObj.toJson(QJsonDocument::Indented);
}


QByteArray ServerMessageFactory::createOpenFileReply(bool response, QString filename, QString uri, CRDT *crdt, QList<Account*>& accounts, QList<Account>& accountsOffline) {
    QJsonObject objToReturn;
    QJsonArray crdtFormattedJson;
    QJsonArray accountsFormattedJson;
    QJsonArray accountsOfflineFormattedJson;
    QString responseString;
    responseString = response ? "ok" : "fail";

    objToReturn.insert("action", "openFileRepl");
    objToReturn.insert("response", responseString);

    if (response) {        
        objToReturn.insert("nameDocument", filename);
        objToReturn.insert("uri", uri);

        crdtFormattedJson = crdt->toJson();
        objToReturn.insert("crdt", crdtFormattedJson);

        for (Account* ac : accounts) {
            QJsonValue jsonAccount = QJsonValue(ac->toJson());
            accountsFormattedJson.append(jsonAccount);
        }
        objToReturn.insert("accounts", accountsFormattedJson);

        for (Account& ac : accountsOffline) {
            QJsonValue jsonAccount = QJsonValue(ac.toJson());
            accountsOfflineFormattedJson.append(jsonAccount);
        }
        objToReturn.insert("accountsOffline", accountsOfflineFormattedJson);
    }

    QJsonDocument docOfObj(objToReturn);
    return docOfObj.toJson(QJsonDocument::Indented);
}


QByteArray ServerMessageFactory::createGetUriReply(QString& nameDocument, QString& uri){
    QJsonObject objToReturn;

    objToReturn.insert("action", "getUriRepl");
    objToReturn.insert("nameDocument", nameDocument);
    objToReturn.insert("uri", uri);

    QJsonDocument docOfObj(objToReturn);
    return docOfObj.toJson(QJsonDocument::Indented);
}


QByteArray ServerMessageFactory::createPermissionReply(bool response, QString& nameDocument){
    QJsonObject objToReturn;
    QString responseString;
    if(response)
        responseString = "ok";
    else
        responseString = "fail";

    objToReturn.insert("action", "permissionRepl");
    objToReturn.insert("response", responseString);
    objToReturn.insert("nameDocument", nameDocument);

    QJsonDocument docOfObj(objToReturn);
    return docOfObj.toJson(QJsonDocument::Indented);
}
